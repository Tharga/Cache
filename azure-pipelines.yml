trigger:
- master

name: 0.1.$(Rev:r)

pool:
  vmImage: 'windows-latest'

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  BQC.ForceNewBaseline: true

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    displayName: Build and Test

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 9'
      inputs:
        version: 9.0.x
        includePreviewVersions: false

    - task: NuGetToolInstaller@1

    - task: DotNetCoreCLI@2
      displayName: 'Restore nuget packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '-c Release'
        versioningScheme: 'byBuildNumber'

    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: >-
          -c $(buildConfiguration)
          --no-build
          --filter "(Category!=Integration)&(Category!=TimeCritical)"
          /p:CollectCoverage=true
          /p:CoverletOutputFormat=cobertura
          /p:SkipAutoProps=true
          /p:ExcludeByAttribute="Obsolete"

    # - task: BuildQualityChecks@8
    #   displayName: 'Build Quality Checks'
    #   inputs:
    #     checkWarnings: true
    #     warningFailOption: 'build'
    #     allowWarningVariance: true
    #     warningVariance: '5'
    #     checkCoverage: true
    #     coverageFailOption: 'build'
    #     coverageType: 'blocks'
    #     allowCoverageVariance: true
    #     coverageVariance: '5'

    - task: DotNetCoreCLI@2
      displayName: 'Pack Tharga.Cache'
      inputs:
        command: 'pack'
        packagesToPack: '**/Tharga.Cache.csproj'
        versioningScheme: 'byBuildNumber'

    - task: DotNetCoreCLI@2
      displayName: 'Pack Tharga.Cache.MongoDB'
      inputs:
        command: 'pack'
        packagesToPack: '**/Tharga.Cache.MongoDB.csproj'
        versioningScheme: 'byBuildNumber'

    - task: DotNetCoreCLI@2
      displayName: 'Pack Tharga.Cache.Redis'
      inputs:
        command: 'pack'
        packagesToPack: '**/Tharga.Cache.Redis.csproj'
        versioningScheme: 'byBuildNumber'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Release
  displayName: Release
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  jobs:
  - job: Release
    displayName: Release

    steps:
    - download: current
      artifact: drop
    - checkout: self
      persistCredentials: true

    - task: NuGetCommand@2
      displayName: 'Push .nupkg to NuGet.org (with symbols)'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/**/*.symbols.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'Nuget.org'

    - script: |
         git tag $(Build.BuildNumber)
         git push origin $(Build.BuildNumber)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: Tag
